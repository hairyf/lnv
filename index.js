#!/usr/bin/env node
'use strict'
const yargs = require('yargs')
const { hideBin } = require('yargs/helpers')
const { version } = require('./package.json')
const { getPackages } = require('@manypkg/get-packages')
const { config } = require('dotenv')
const { relative } = require('pathe')
const { writeFile } = require('fs/promises')

const args = yargs(hideBin(process.argv))
  .scriptName('lnv')
  .showHelpOnFail(false)
  .version(version)
  .usage('$0 <mode> [args]')
  .alias('h', 'help')
  .alias('v', 'version')
  .option('recursive', {
    alias: 'r',
    type: 'boolean',
    describe: 'to bump all packages in the monorepo.',
  })
  .help()
  .parse()

if (!args.recursive && !args._[0])
  throw new Error(`Please enter lnv <mode> the loading mode`)

const mode = args._[0]
const root = process.cwd()

main()

async function main() {
  const name = mode === 'dotenv' ? '.env.vault' : `.env.${mode}`
  const suffix = args.recursive ? 'packages by' : '.env'
  const successfullyMessage = mode === 'dotenv'
    ? `Successfully decrypted ${name} to ${suffix}`
    : `Successfully loaded ${name} to ${suffix}`

  try {
    const envs = mode === 'dotenv' ? await dotenvx() : await dotenv()
    if (args.recursive) {
      const { packages } = await getPackages(process.cwd())
      const messages = [successfullyMessage]
      for (const pack of packages) {
        await write(`${pack.dir}/.env`, envs.parsed)
        messages.push(` - ${relative(root, pack.dir)}/.env`)
      }
      messages.forEach(message => console.log(message))
      return
    }

    await write(`${root}/.env`, envs.parsed)
    console.log(successfullyMessage);
  } catch (error) {
    console.log(`Failed to load ${name}`, error.message)
  }
}

async function dotenv() {
  return config({ path: (mode && `.env.${mode}`) || undefined })
}

async function dotenvx() {
  const keyEnv = config({ path: '.env.key', processEnv: {} })
  const defaultEnv = config({ path: '.env', processEnv: {} })

  let DOTENV_KEY
  if (keyEnv.parsed?.DOTENV_KEY) {
    DOTENV_KEY = keyEnv.parsed?.DOTENV_KEY
  }
  else if (defaultEnv.parsed?.DOTENV_KEY) {
    DOTENV_KEY = defaultEnv.parsed?.DOTENV_KEY
  }
  else {
    DOTENV_KEY = process.env.DOTENV_KEY
  }

  if (!DOTENV_KEY)
    throw new Error('No DOTENV_KEY found in .env|.env.key or process.env')
  const envs = config({ DOTENV_KEY }) // If DOTENV_KEY found, get the .env.vault, load it to get shared env variables
  if (!envs.parsed || Object.keys(envs.parsed).length === 0)
    throw new Error('No .env.vault found or it is empty')

  return envs
}

async function write(filepath, parsed = {}) {
  const contents = Object.entries(parsed)
    .map(([key, value]) => `${key}=${value}`)
  const content = [
    "# This file is generated by lnv command",
    '# DO NOT ATTEMPT TO EDIT THIS FILE',
    contents.join('\n'),
  ].join('\n')
  await writeFile(filepath, content, 'utf-8')
}

// console.log(cli)
// if (mode)
// require('fs').copyFileSync(`.env.${mode}`, '.env')
